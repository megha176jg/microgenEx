// Code generated by microgen 1.0.4. DO NOT EDIT.

package service

import (
	"context"
	log "github.com/go-kit/kit/log"
	service "microgen/main"
)

// ErrorLoggingMiddleware writes to logger any error, if it is not nil.
func ErrorLoggingMiddleware(logger log.Logger) Middleware {
	return func(next service.Service) service.Service {
		return &errorLoggingMiddleware{
			logger: logger,
			next:   next,
		}
	}
}

type errorLoggingMiddleware struct {
	logger log.Logger
	next   service.Service
}

func (M errorLoggingMiddleware) Validate(ctx context.Context, userId int, token string) (err error) {
	defer func() {
		if err != nil {
			M.logger.Log("method", "Validate", "message", err)
		}
	}()
	return M.next.Validate(ctx, userId, token)
}

func (M errorLoggingMiddleware) Delete(ctx context.Context, userId int, token string) (err error) {
	defer func() {
		if err != nil {
			M.logger.Log("method", "Delete", "message", err)
		}
	}()
	return M.next.Delete(ctx, userId, token)
}
