// Code generated by microgen 1.0.4. DO NOT EDIT.

package service

import (
	"context"
	log "github.com/go-kit/kit/log"
	service "microgen/main"
	"time"
)

// LoggingMiddleware writes params, results and working time of method call to provided logger after its execution.
func LoggingMiddleware(logger log.Logger) Middleware {
	return func(next service.Service) service.Service {
		return &loggingMiddleware{
			logger: logger,
			next:   next,
		}
	}
}

type loggingMiddleware struct {
	logger log.Logger
	next   service.Service
}

func (M loggingMiddleware) Validate(arg0 context.Context, arg1 int, arg2 string) (res0 error) {
	defer func(begin time.Time) {
		M.logger.Log(
			"method", "Validate",
			"message", "Validate called",
			"request", logValidateRequest{
				Token:  arg2,
				UserId: arg1,
			},
			"err", res0,
			"took", time.Since(begin))
	}(time.Now())
	return M.next.Validate(arg0, arg1, arg2)
}

func (M loggingMiddleware) Delete(arg0 context.Context, arg1 int, arg2 string) (res0 error) {
	defer func(begin time.Time) {
		M.logger.Log(
			"method", "Delete",
			"message", "Delete called",
			"request", logDeleteRequest{
				Token:  arg2,
				UserId: arg1,
			},
			"err", res0,
			"took", time.Since(begin))
	}(time.Now())
	return M.next.Delete(arg0, arg1, arg2)
}

type (
	logValidateRequest struct {
		UserId int
		Token  string
	}
	logDeleteRequest struct {
		UserId int
		Token  string
	}
)
