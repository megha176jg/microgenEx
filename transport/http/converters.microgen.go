// Code generated by microgen 1.0.4. DO NOT EDIT.

// Please, do not change functions names!
package transporthttp

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	mux "github.com/gorilla/mux"
	"io/ioutil"
	transport "microgen/main/transport"
	"net/http"
	"path"
	"strconv"
)

func CommonHTTPRequestEncoder(_ context.Context, r *http.Request, request interface{}) error {
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(request); err != nil {
		return err
	}
	r.Body = ioutil.NopCloser(&buf)
	return nil
}

func CommonHTTPResponseEncoder(_ context.Context, w http.ResponseWriter, response interface{}) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	return json.NewEncoder(w).Encode(response)
}

func _Decode_Validate_Request(_ context.Context, r *http.Request) (interface{}, error) {
	var (
		_param string
	)
	var ok bool
	_vars := mux.Vars(r)
	_param, ok = _vars["userId"]
	if !ok {
		return nil, errors.New("param userId not found")
	}
	userId, err := strconv.ParseInt(_param, 10, 64)
	if err != nil {
		return nil, err
	}
	_param, ok = _vars["token"]
	if !ok {
		return nil, errors.New("param token not found")
	}
	token := _param
	return &transport.ValidateRequest{
		Token:  string(token),
		UserId: int(userId),
	}, nil
}

func _Decode_Delete_Request(_ context.Context, r *http.Request) (interface{}, error) {
	var req transport.DeleteRequest
	err := json.NewDecoder(r.Body).Decode(&req)
	return &req, err
}

func _Decode_Validate_Response(_ context.Context, r *http.Response) (interface{}, error) {
	var resp transport.ValidateResponse
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func _Decode_Delete_Response(_ context.Context, r *http.Response) (interface{}, error) {
	var resp transport.DeleteResponse
	err := json.NewDecoder(r.Body).Decode(&resp)
	return &resp, err
}

func _Encode_Validate_Request(ctx context.Context, r *http.Request, request interface{}) error {
	req := request.(*transport.ValidateRequest)
	r.URL.Path = path.Join(r.URL.Path, "validate",
		strconv.FormatInt(int64(req.UserId), 10),
		req.Token,
	)
	return nil
}

func _Encode_Delete_Request(ctx context.Context, r *http.Request, request interface{}) error {
	r.URL.Path = path.Join(r.URL.Path, "delete")
	return CommonHTTPRequestEncoder(ctx, r, request)
}

func _Encode_Validate_Response(ctx context.Context, w http.ResponseWriter, response interface{}) error {
	return CommonHTTPResponseEncoder(ctx, w, response)
}

func _Encode_Delete_Response(ctx context.Context, w http.ResponseWriter, response interface{}) error {
	return CommonHTTPResponseEncoder(ctx, w, response)
}
